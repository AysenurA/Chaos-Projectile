"""
.. module:: events
   :Platform: Unix, Windows
   :Synopsis: A module that contains an event manager and all types of events, that can occur in game.
"""

class Event:
    """This is a superclass for any events that might be generated by an object and sent to the EventManager.
    """

    def __init__(self):
        """Generic event.
        
        :Attributes:
            - *name* (string): Type of the event as a name
        """
        self.name = "Generic Event"


class TickEvent(Event):
    """CPU Tick event will be send every frame.
    
    :Attributes:
        - *dt* (int): Time expired since CPU Tick
    """
    
    def __init__(self, dt):
        """
        :param dt: Time expired since CPU tick.
        :type dt: int
        """
        self.name = "CPU Tick Event"
        self.dt = dt


class ResizeWindowEvent(Event):
    """Resize Window Event.
    Is send when event of type pygame.VIDEORESIZE is occurs.
    
    :Attributes:
        - *width* (int): New width of the window
        - *height* (int) New height of the window
    """
    
    def __init__(self, width, height):
        """
        :param width: New width of the window
        :type width: int
        :param height: New height of the window
        :type height: int
        """
        self.name = "Resize Window Event" 
        self.width = width
        self.height = height


class QuitEvent(Event):
    """Programm Quit Event.
    Is send when event of type pygame.QUIT is occurs.
    """
    
    def __init__(self):
        self.name = "Program Quit Event"

class TogglePauseEvent(Event):
    def __init__(self):
        self.name = "pause game or unpause game"

class ToggleContinuousAttack(Event):
    def __init__(self):
        self.name = "cantinuous attack"

class SentInputAction(Event):
    """for input
    """
    
    def __init__(self, action, inpt):
        self.name = "sent input for this action"
        self.action = action
        self.input = inpt

class MouseMoved(Event):
    """Mouse moved event stores new position of mouse pointer on the screen.
    
    :Attributes:
        - *x* (int): x value of new mouse pointer position
        - *y* (int): y value of new mouse pointer position
    """
    
    def __init__(self, x, y):
        """
        :param x: x value of new mouse pointer position
        :type x: int
        :param y: y value of new mouse pointer position
        :type y: int
        """
        self.name = "Mouse Moved Event"
        self.x = x
        self.y = y

class MouseButtonDown(Event):
    
    def __init__(self):
        self.name = "Mouse Button Down Event"

class ResetWorld(Event):
    """
    :Attributes:
    """
    
    def __init__(self):
        """
        """
        self.name = "Reset the world"

class EnemyNear(Event):
    """
    :Attributes:
    """
    
    def __init__(self, entity_ID):
        """
        """
        self.name = "Enemy is near"
        self.entity_ID = entity_ID
        
class NoEnemysNear(Event):
    """
    :Attributes:
    """
    
    def __init__(self):
        """
        """
        self.name = "No Enemys Near"

class NoBossNear(Event):
    """
    :Attributes:
    """
    
    def __init__(self):
        """
        """
        self.name = "No Boss near"

class UpdateImagePosition(Event):
    """Occurs when entity has moved and image position has to be updated.
    
    :Attributes:
        - *entity_ID* (int): entity that has been moved
        - *new_position* (int tuple): new position
    """
    
    def __init__(self, entity_ID, new_position):
        """
        :param entity_ID: entity that has been moved
        :type entity_ID: int
        :param new_position: new position
        :type new_position: int tuple
        """
        self.name = "Update Image Position"
        self.entity_ID = entity_ID
        self.new_position = new_position

class UpdatePlayersHpUI(Event):
    def __init__(self, player_ID):
        self.name = "Update HP UI"
        self.player_ID = player_ID

class UpdateEnemysHpUI(Event):
    def __init__(self, enemy_ID):
        self.name = "Update Enemy's HP UI"
        self.enemy_ID = enemy_ID

class CollectedItem(Event):
    def __init__(self, entity_ID):
        self.name = "Player collected item"
        self.entity_ID = entity_ID

class PortalEntered(Event):
    def __init__(self, entity_ID):
        self.name = "Player entered portal"
        self.entity_ID = entity_ID

class PlayerAims(Event):
    def __init__(self, player_ID):
        self.name = "Player Aims"
        self.player_ID = player_ID

class CollisionOccured(Event):
    """This event is sent when two objects collide.
    Moved collider collides with collidee
    
    :Attributes:
        - *collider_ID* (int): Collider ID
        - *collidee* ( ): Collidee
    """

    def __init__(self, collider_ID, collidee):
        """
        :param collider_ID: Collider ID
        :type collider_ID: int
        """
        self.name = "Collision occured"
        self.collider_ID = collider_ID
        self.collidee = collidee

class ActivateEntity(Event):
    
    def __init__(self, entity_ID):
        self.name = "Activate."
        self.entity_ID = entity_ID

class EntityMovesRight(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Moved Right Event"
        self.entity_ID = entity_ID

class EntityMovesLeft(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Moved Left Event"
        self.entity_ID = entity_ID

class EntityStopMovingRight(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Stop Moved Right Event"
        self.entity_ID = entity_ID

class EntityStopMovingLeft(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Stop Moved Left Event"
        self.entity_ID = entity_ID
        
class EntityJump(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Jump Event"
        self.entity_ID = entity_ID
        
class EntityGrounded(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Jump Event"
        self.entity_ID = entity_ID

class EntityAttacks(Event):
    
    def __init__(self, entity_ID, attack_Nr):
        self.name = "Entity Attacks Event"
        self.entity_ID = entity_ID
        self.attack_Nr = attack_Nr

class EntityStunned(Event):
    
    def __init__(self, entity_ID, duration):
        self.name = "stunned"
        self.entity_ID = entity_ID
        self.duration = duration

class EntityDies(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Dies Event"
        self.entity_ID = entity_ID

class RemoveEntityFromTheGame(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Jump Event"
        self.entity_ID = entity_ID

#-------------------------------------------------------------
class EntityMovesRightRequest(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Moved Right Event"
        self.entity_ID = entity_ID

class EntityMovesLeftRequest(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Moved Left Event"
        self.entity_ID = entity_ID
        
class EntityStopMovingRightRequest(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Stop Moved Right Event"
        self.entity_ID = entity_ID

class EntityStopMovingLeftRequest(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Stop Moved Left Event"
        self.entity_ID = entity_ID

class EntityJumpRequest(Event):
    
    def __init__(self, entity_ID):
        self.name = "Entity Jump Event"
        self.entity_ID = entity_ID

class EntityAttackRequest(Event):
    
    def __init__(self, entity_ID, attack_Nr, spawn_attack_pos=None, attack_dir=None):
        self.name = "Entity Jump Event"
        self.entity_ID = entity_ID
        self.attack_Nr = attack_Nr
        self.spawn_attack_pos = spawn_attack_pos
        self.attack_dir = attack_dir

#-------------------------------------------------------------

class EventManager:
    """This class is responsible for coordinating most communication between the game systems.
    
    This class and the idea of event driven architecture was taken from `sjbrown's Writing Games Tutorial <http://ezide.com/games/writing-games.html>`_.
    
    :Attributes:
        - *listener* (): registered listeners
    """
    
    def __init__(self):
        from weakref import WeakKeyDictionary
        self.listeners = WeakKeyDictionary()
        #self.eventQueue= []

    def register_listener(self, listener):
        """Register a listener to this event manager.
        Listener must contain notify() method.
        
        :param listener: listener to register
        """
        self.listeners[listener] = 1

    def unregister_listener(self, listener):
        """Unregister a listener of this event manager.
        
        :param listener: listener to unregister
        """
        if listener in self.listeners:
            del self.listeners[listener]

    def post(self, event):
        """Pass an event to all registered listeners of this event manger.
        
        :param event: event that will be passed
        :type event: Event
        """ 
        for listener in self.listeners:
            #NOTE: If the weakref has died, it will be automatically removed,
            #so we don't have to worry about it.
            listener.notify(event)
